#version 450
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

struct ParticleData {
    vec2 pos;
    vec2 vel;
    uint bucketIndex;
    uint gridIndex;
    vec2 data;
};

layout(std430, binding = 3) buffer ParticleBuffer {
    ParticleData particles[];
};

layout(std430, binding = 5) buffer BucketSizeBuffer {
    uint bucketSizes[];
};

uniform int gridSize;

layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

void main() {
    uint gid = gl_GlobalInvocationID.x;
    if (gid >= particles.length()) return;

    ParticleData particle = particles[gid];
    particle.pos.y = clamp(particle.pos.y * -1.0, -1.0, 1.0);
    particle.pos.x = clamp(particle.pos.x, -1.0, 1.0);
    particle.pos = (particle.pos + vec2(1.0)) * vec2(0.5); // Normalize position to [0, 1]
    // Calculate grid cell index
    uint gridPosx = uint(floor(particle.pos.x * gridSize));
    uint gridPosy = uint(floor(particle.pos.y * gridSize));

    if (gridPosx >= gridSize) gridPosx = gridSize - 1;
    if (gridPosy >= gridSize) gridPosy = gridSize - 1;
    uint gridIndex = gridPosy * gridSize + gridPosx;

    // Increment the bucket size for the corresponding cell
    particles[gid].bucketIndex = atomicAdd(bucketSizes[gridIndex], 1);
    particles[gid].gridIndex = gridIndex;
}