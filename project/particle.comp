#version 430
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

layout( local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

struct ParticleData {
    vec2 pos;
    vec2 vel;
    uint bucketIndex;
    uint gridIndex;
    float density;
    float padding;
};

// Particles come sorted by grid index
layout( std430, binding=3 ) buffer ParticleBuffer
{
    ParticleData particles[];
};

layout( std430, binding=4 ) readonly buffer PrefixSumsBuffer
{
    int prefixSums[];
};

uniform float deltaTime;
uniform float time;

uniform int gridSize;
uniform float mouseX;
uniform float mouseY;
vec2 mouseCoords;

float gravity = -9.82;
float smoothingRadius = 2.0 / float(gridSize);
const float collisionDampingFactor = 0.95;
uniform float kernelScalingFactor;
uniform bool gravityEnabled;

float SpikyKernel(float distance, float radius) {
    if (distance >= radius) return 0.0;

    float area = 3.14159 * radius * radius;

    float q = distance - radius;
    return q * q  / area;
    // return q * q * q;
}

float CalculateDensity(uint id, vec2 particlePos) {
    float density = 0;
    float mass = 1;

    ParticleData particle = particles[id];
    particle.pos = particlePos;

    uint gridIndex = particle.gridIndex;
    uint gridRow = gridIndex / gridSize;
    uint gridCol = gridIndex % gridSize;

    // Loop through the 3x3 grid cells
    for (int rowOffset = -1; rowOffset <= 1; rowOffset++) {
        for (int colOffset = -1; colOffset <= 1; colOffset++) {
            int neighborRow = int(gridRow) + rowOffset;
            int neighborCol = int(gridCol) + colOffset;

            // Skip out-of-bounds neighbors
            if (neighborRow < 0 || neighborRow >= gridSize || neighborCol < 0 || neighborCol >= gridSize) {
                continue;
            }

            // Calculate the neighboring cell's grid index
            uint neighborGridIndex = uint(neighborRow) * gridSize + uint(neighborCol);
            
            int startIndex = prefixSums[neighborGridIndex];
            int endIndex;
            // Ensure we don't go out of bounds
            if (neighborGridIndex + 1 >= prefixSums.length()) {
                endIndex = particles.length();
            }
            else {
                endIndex = prefixSums[neighborGridIndex + 1];
            }

            for (int i = startIndex; i < endIndex; i++) {
                ParticleData other = particles[i];
                density += SpikyKernel(length(other.pos - particle.pos), smoothingRadius);
            }
        }
    }

    return density;
}

vec2 CalculateDensityGradient(uint id) {
    const float stepSize = 0.001;
    ParticleData particle = particles[id];
    float deltaX = CalculateDensity(id, particle.pos + (vec2(1.0, 0.0) * stepSize)) -
        CalculateDensity(id, particle.pos);
    float deltaY = CalculateDensity(id, particle.pos + (vec2(0.0, 1.0) * stepSize)) -
        CalculateDensity(id, particle.pos);

    return -vec2(deltaX, deltaY) / stepSize;
}

void main() {
    uint gid = gl_GlobalInvocationID.x;
    if (gid >= particles.length()) return;

    mouseCoords = vec2(mouseX, mouseY);

    ParticleData particle = particles[gid];
    particle.density = CalculateDensity(gid, particle.pos);
    vec2 gradient = CalculateDensityGradient(gid);
  
    // uint gridIndex = particle.gridIndex;

    // uint gridRow = gridIndex / gridSize;
    // uint gridCol = gridIndex % gridSize;

    // vec2 gradient = vec2(0.0);
    // const float stepSize = 0.001;

    // Loop through the 3x3 grid cells
    // for (int rowOffset = -1; rowOffset <= 1; rowOffset++) {
    //     for (int colOffset = -1; colOffset <= 1; colOffset++) {
    //         int neighborRow = int(gridRow) + rowOffset;
    //         int neighborCol = int(gridCol) + colOffset;

    //         // Skip out-of-bounds neighbors
    //         if (neighborRow < 0 || neighborRow >= gridSize || neighborCol < 0 || neighborCol >= gridSize) {
    //             continue;
    //         }

    //         // Calculate the neighboring cell's grid index
    //         uint neighborGridIndex = uint(neighborRow) * gridSize + uint(neighborCol);

    //         //if (neighborGridIndex != gridIndex) continue;
            
    //         int startIndex = prefixSums[neighborGridIndex];
    //         int endIndex;
    //         // Ensure we don't go out of bounds
    //         if (neighborGridIndex + 1 >= prefixSums.length()) {
    //             endIndex = particles.length();
    //         }
    //         else {
    //             endIndex = prefixSums[neighborGridIndex + 1];
    //         }

    //         for (int i = startIndex; i < endIndex; i++) {
    //             ParticleData other = particles[i];
    //             if (i == gid) continue;


    //             //particle.density += vec2(-1.0);
    //             // Calculate the gradient
    //             float deltaX = SpikyKernel(length((particle.pos + vec2(stepSize, 0.0)) - other.pos), smoothingRadius) - 
    //                 SpikyKernel(length(particle.pos - other.pos), smoothingRadius);
    //             float deltaY = SpikyKernel(length((particle.pos + vec2(0.0, stepSize)) - other.pos), smoothingRadius) - 
    //                 SpikyKernel(length(particle.pos - other.pos), smoothingRadius);
    //             gradient -= vec2(deltaX, deltaY) / vec2(stepSize);

    //             float dx = other.pos.x - particle.pos.x;
    //             float dy = other.pos.y - particle.pos.y;

    //             //particle.vel += vec2(dx, dy);
    //             //particle.vel += gradient;// * vec2(10.0);
    //         }
    //     }
    // }
    // Bounce off the walls
    if (particle.pos.x < -1.0) {
        particle.vel.x = abs(particle.vel.x) * collisionDampingFactor; // Add a small push
        particle.pos.x = -1.0 + 1e-2; // Increase the offset
    }
    if (particle.pos.x > 1.0) {
        particle.vel.x = -abs(particle.vel.x) * collisionDampingFactor;
        particle.pos.x = 1.0 - 1e-2; // Increase the offset
    }
    if (particle.pos.y < -1.0) {
        particle.vel.y = abs(particle.vel.y) * collisionDampingFactor;
        particle.pos.y = -1.0 + 1e-2; // Increase the offset
    }
    if (particle.pos.y > 1.0) {
        particle.vel.y = -abs(particle.vel.y) * collisionDampingFactor;
        particle.pos.y = 1.0 - 1e-2; // Increase the offset
    }
    if (gravityEnabled) {
        particle.vel.y += gravity * deltaTime;
    }
    particle.density = particle.density + 1e-6; // Prevent division by zero for some weird reason
    particle.vel = gradient * vec2(deltaTime) * (vec2(1.0) / particle.density);
    //particle.pos += particle.vel * deltaTime;

    particles[gid] = particle;
}