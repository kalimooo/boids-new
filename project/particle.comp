#version 430
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

struct ParticleData {
    vec2 pos;
    vec2 vel;
    vec2 acc;
    uint bucketIndex;
    uint gridIndex;
};

// Particles come sorted by grid index
layout( std430, binding=3 ) buffer ParticleBuffer
{
    ParticleData particles[];
};

layout( std430, binding=4 ) readonly buffer PrefixSumsBuffer
{
    int prefixSums[];
};

uniform float deltaTime;
uniform float time;

uniform int gridSize;

float gravity = -1.0;

layout( local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

void main() {
    uint gid = gl_GlobalInvocationID.x;
    if (gid >= particles.length()) return;

    ParticleData particle = particles[gid];
    
    // Apply gravity
    //particle.acc.y += gravity * deltaTime;
    particle.vel.y += gravity * deltaTime;
    particle.pos += particle.vel * deltaTime;

    // Bounce off the walls
    if (particle.pos.x < -1.0 || particle.pos.x > 1.0) {
        particle.vel.x = -particle.vel.x;
        particle.pos.x = clamp(particle.pos.x, -1.0, 1.0);
    }
    if (particle.pos.y < -1.0 || particle.pos.y > 1.0) {
        particle.vel.y = -particle.vel.y;
        particle.pos.y = clamp(particle.pos.y, -1.0, 1.0);
    }

    particles[gid] = particle;
}